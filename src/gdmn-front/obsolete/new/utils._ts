import {Attribute, Entity, EntityUtils, ERModel, IAttribute} from "gdmn-orm";

export const listType = [
  {key: 'Detail', text: 'Detail'},
  {key: 'Parent', text: 'Parent'},
  {key: 'Entity', text: 'Entity'},
  {key: 'String', text: 'String'},
  {key: 'Set', text: 'Set'},
  {key: 'Sequence', text: 'Sequence'},
  {key: 'Integer', text: 'Integer'},
  {key: 'Numeric', text: 'Numeric'},
  {key: 'Float', text: 'Float'},
  {key: 'Boolean', text: 'Boolean'},
  {key: 'Date', text: 'Date'},
  {key: 'TimeStamp', text: 'TimeStamp'},
  {key: 'Time', text: 'Time'},
  {key: 'Blob', text: 'Blob'},
  {key: 'Enum', text: 'Enum'},
];

export const alignmentlist = [
  {key: 'left', text: 'left'},
  {key: 'right', text: 'right'},
  {key: 'center', text: 'center'}
];

export interface ILastFocusedRow {
  value: string,
  numberRow: number
};

export const dateFormats = ['', 'dd.mm.yy', 'dd.mm.yyyy'];

export const numberFormats = [
  {
    name: ''
  },
  {
    name: '0',
    maxDecDigits: 0
  },
  {
    name: '0.##',
    maxDecDigits: 2
  },
  {
    name: '0.00',
    maxDecDigits: 2,
    minDecDigits: 2
  },
  {
    name: '0.000',
    maxDecDigits: 3,
    minDecDigits: 3
  },
  {
    name: '0.0000',
    maxDecDigits: 4,
    minDecDigits: 4
  },
  {
    name: '#,##0.00',
    maxDecDigits: 2,
    minDecDigits: 2,
    useGrouping: true,
    groupSeparator: ','
  },
  {
    name: '$#,##0.00',
    maxDecDigits: 2,
    minDecDigits: 2,
    currSign: '$ ',
    currSignPlaceBefore: true
  }
];

export const BooleanFormats = ["Yes, No", "True, false", "1, 0"];


export const getFieldType = (value: string) => {
  switch (value) {
    case 'Parent':
    case 'Entity':
    case 'Set':
      return {fieldType: "link"};
      break;
    case 'Integer':
    case 'Numeric':
    case 'Float':
      return {fieldType: "number"};
      break;
    case 'Date':
    case 'Time':
    case 'TimeStamp':
      return {fieldType: "date"};
      break;
    case 'Boolean':
      return {fieldType: "boolean"};
      break;
    default:
      return {fieldType: ""};
  }
};

export function parseEntity(entityStr: string[], erModel: ERModel): Entity {
  let entityName = '';
  let parentName = '';
  const attrs: IAttribute[] = [];
  entityStr.forEach((element, index) => {
    if (index == 0) {
      const begin = element.indexOf('(');
      entityName = element.slice(0, begin)
      if (begin != -1) {
        parentName = element.slice(begin).replace('(', '').replace(')', '')
      }
    }
    if (index >= 3) {
      const begin = element.indexOf('*');
      const attr: any = {};

      if (begin != -1) {
        attr["required"] = true;
        attr["name"] = element.slice(0, begin).replace('    ', '');
      } else {
        attr["name"] = element.slice(0, element.indexOf('-') - 1).replace('    ', '');
        ;
      }

      const beginLname = element.indexOf('-');
      const endLname = element.indexOf(':');

      attr["lname"] = {ru: element.slice(beginLname + 2, endLname)};
      const endType = element.indexOf(',');


      const strType = element.slice(endLname + 2, endType);
      const findLink = strType.indexOf('[');

      if (findLink != -1) {
        attr["type"] = sn.get(strType.slice(0, findLink - 1));
        attr["references"] = [strType.slice(findLink + 1, strType.indexOf(']'))];
      } else {
        attr["type"] = sn.get(strType);
      }
      if  (attr["type"] === "Set"){
        attr["attributes"] = [];
      }
      attrs.push(attr as IAttribute)
    }
  });
  const newEntity = new Entity({
    name: entityName,
    lName: {ru: {name: entityName}},
    parent: parentName ? erModel.entity(parentName) : undefined
  });
  erModel.add(newEntity)

  attrs.forEach((attr) => {
    if (attr.type !== "Sequence"){
      const attr2 = EntityUtils.createAttribute(attr, erModel);
      newEntity.add(attr2)
    }
  });

  return newEntity
}

const sn = new Map();
sn.set("->", "Entity");
sn.set("S", "String");
sn.set("<->", "Set");
sn.set("-^", "Parent");
sn.set("Seq", "Sequence");
sn.set("I", "Integer");
sn.set("N", "Numeric");
sn.set("F", "Float");
sn.set("B", "Boolean");
sn.set("DT", "Date");
sn.set("TS", "TimeStamp");
sn.set("TM", "Time");
sn.set("BLOB", "Blob");
sn.set("E", "Enum");
