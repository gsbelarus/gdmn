import {INewEntityProps} from "./NewEntity.types";
import React, {useCallback, useEffect, useRef, useState} from "react";
import CSSModules from 'react-css-modules';
import styles from './styles.css';
import {
  Checkbox,
  ComboBox,
  CommandBar,
  DefaultButton,
  ICheckbox,
  IComboBox,
  IComboBoxOption,
  ICommandBarItemProps,
  ITextField,
  TextField
} from "office-ui-fabric-react";
import {IDataRow, RecordSet, rsActions} from "gdmn-recordset";
import {gdmnActions} from "@src/app/scenes/gdmn/actions";
import {IChangedFields, IEntityName, ILastEdited} from "@src/app/scenes/ermodel/utils";
import {ISessionData} from "@src/app/scenes/gdmn/types";
import {apiService} from "@src/app/services/apiService";
import {EntityUtils, IAttribute, IEntityAttribute, ISetAttribute} from "gdmn-orm";
import {EntityAttributeContainer} from "obsolete/new/EntityAttributeContainer";
import {
  prepareDefaultEntityQuery,
  prepareDefaultEntityQuerySetAttr
} from "@src/app/scenes/ermodel/EntityDataView/utils";
import {parseEntity} from "obsolete/new/utils";


export const NewEntity = CSSModules((props: INewEntityProps): JSX.Element => {
  const {history, dispatch, url, viewTab, erModel, entityName, newRecord, entities} = props;

  const getSavedControlsData = (): ISessionData | undefined => {
    if (viewTab && viewTab.sessionData && viewTab.sessionData.controls instanceof Object) {
      return viewTab.sessionData.controls as ISessionData;
    }
    return undefined;
  };

  const getSavedLastEdit = (): ILastEdited | undefined => {
    if (viewTab && viewTab.sessionData && viewTab.sessionData.lastEdited) {
      return viewTab.sessionData.lastEdited as ILastEdited;
    }
    return undefined;
  };

  const getSavedLastFocused = (): string | undefined => {
    if (viewTab && viewTab.sessionData && typeof viewTab.sessionData.lastFocused === 'string') {
      return viewTab.sessionData.lastFocused;
    }
    return undefined;
  };

  const getCountEntityAttributes = (): string[] => {
    if (viewTab && viewTab.sessionData && viewTab.sessionData.countEntityAttributes) {
      return viewTab.sessionData.countEntityAttributes;
    }
    return [];
  };

  const getRefAttribute = (): IAttribute[] | IEntityAttribute[] | ISetAttribute[] => {
    if (viewTab && viewTab.sessionData && viewTab.sessionData.refAttribute) {
      return viewTab.sessionData.refAttribute;
    }
    return [];
  };

  const getRefEntityName = (): IEntityName | undefined => {
    if (viewTab && viewTab.sessionData && viewTab.sessionData.refEntityName) {
      return viewTab.sessionData.refEntityName as IEntityName;
    }
    return undefined;
  };

  const getParentName = (): IEntityName | undefined => {
    if (viewTab && viewTab.sessionData && viewTab.sessionData.parentName) {

      return viewTab.sessionData.parentName as IEntityName;
    }
    return undefined;
  };

  const getValueHiddenParent = (): boolean => {
    if (viewTab && viewTab.sessionData && viewTab.sessionData.valueHiddenParent) {
      return viewTab.sessionData.valueHiddenParent;
    }
    return false;
  };
  const getSavedChangedFields = (): IChangedFields => {
    if (viewTab && viewTab.sessionData && viewTab.sessionData.changedFields instanceof Object) {
      return viewTab.sessionData.changedFields as IChangedFields;
    }
    return {};
  };

  const lastEdited = useRef(getSavedLastEdit());
  const lastFocused = useRef(getSavedLastFocused());

  const controlsData = useRef(getSavedControlsData());
  const refAttribute = useRef(getRefAttribute());
  const valueHiddenParent = useRef(getValueHiddenParent());
  const refEntityName = useRef(getRefEntityName());
  const parentName = useRef(getParentName());
  const countEntityAttributes = useRef(getCountEntityAttributes());
  const changedFields = useRef(getSavedChangedFields());

  const needFocus = useRef<ITextField | IComboBox | ICheckbox | undefined>();

  const [changedCountEntityAttributes, setCountEntityAttributes] = useState(getCountEntityAttributes());
  const [changed, setChanged] = useState(!!(lastEdited.current));
  const [hiddenParent, setHiddenParent] = useState(getValueHiddenParent());
  const [attributeData, setAttributeData] = useState(getRefAttribute());

  const useAttributeData = (value: IAttribute | IEntityAttribute | ISetAttribute, idRow: string) => {
    const attributes = attributeData.slice();
    const findAttr = attributes.find(fn => idRow === fn.id);

    if (!findAttr) {
      attributes.push({...value, id: idRow})
    } else {
      const ind = attributes.indexOf(findAttr, 0);
      attributes[ind] = {...value, id: idRow};
    }

    setAttributeData(attributes)
    refAttribute.current = attributes;
  };

  const setChangesToRowField = () => {
    setChanged(true)
  };

  const deleteAttributeData = (idRow: string) => {
    const attributes = attributeData.slice();
    const newAttributes = attributes
      .filter((field, index) => newRecord ? field.id !== idRow : true)
      .map((field) => {
        return field
      });

    setAttributeData(newAttributes)

    const newArr = changedCountEntityAttributes
      .filter((field, index) => field !== idRow)
      .map((field) => {
        return field
      });

    setCountEntityAttributes(newArr);
    countEntityAttributes.current = newArr;
    refAttribute.current = newAttributes;
    changedFields.current[idRow] = "delete";
  };

  const postChanges = useCallback((close: boolean) => {
    const name = refEntityName.current;

    if (!name) {
      throw new Error('"Name" field is required')
    }
    const parent = parentName.current;
    if (newRecord) {
      dispatch(async () => {

        if (parent) {
          const result = await apiService.AddEntity({
            entityName: name.value.toUpperCase(),
            parentName: parent.value.toUpperCase(),
            attributes: refAttribute.current
          });

          if (!result.error) {
            parseEntity(result.payload.result!, erModel!)
          }

        } else {
          const result = await apiService.AddEntity({
            entityName: name.value.toUpperCase(),
            attributes: refAttribute.current
          });

          if (!result.error) {
            parseEntity(result.payload.result!, erModel!)
          }
        }
      });

      if (entities) {
        dispatch(async (dispatch, getState) => {
          dispatch(rsActions.setRecordSet(
            entities.set({
              name: name.value.toUpperCase(),
              description: name.value.toUpperCase()
            } as IDataRow)))
        })
      }
    } else {
      dispatch(async () => {
        if (parent) {
          await apiService.editEntity({
            entityName: name.value.toUpperCase(),
            changedFields: changedFields.current,
            attributes: refAttribute.current
          })
        } else {
          await apiService.editEntity({
            entityName: name.value.toUpperCase(),
            changedFields: changedFields.current,
            attributes: refAttribute.current
          })
        }
        /**
         *  в данной части мы сравниваем список изменных полей (changedFields) и аттрибуты Entity
         *  далее если мы нашли соответствии атррибута и статус его delete  то удаляем его из Entity
         *  если же мы не нашли соотвествия т.к он новый и он имеет соотвествующий статус add то добавляем его
         *  */

        if (erModel) {
          const entityName = name.value;
          const entity = erModel.entity(entityName);

          Object.entries(changedFields.current).forEach(([key, value]) => {
            const findAttr = entity.attributes[key];

            if (findAttr) {
              if (value === "delete") {
                entity.remove(entity.attribute(findAttr.name))
              }
            } else if (value === "add") {
              const addAttr = refAttribute.current.find((at) => at.id === key);
              if (addAttr) {
                entity.add(EntityUtils.createAttribute(addAttr, erModel))
              }
            }
          });
        }
      });
    }
    setChanged(false);
    if (close) {
      deleteViewTab(true);
    }
  }, [changed]);

  const addViewTab = (recordSet: RecordSet | undefined) => {
    dispatch(gdmnActions.addViewTab({
      url,
      caption: newRecord ? 'Add entity' : entityName!,
      canClose: true,
    }));
  };

  const deleteViewTab = (changePath: boolean) => dispatch(gdmnActions.deleteViewTab({
    viewTabURL: url,
    locationPath: changePath ? location.pathname : undefined,
    historyPush: changePath ? history.push : undefined
  }));
  const commandBarItems: ICommandBarItemProps[] = [
    {
      key: 'saveAndClose',
      disabled: !changed,
      text: 'Сохранить',
      iconProps: {
        iconName: 'CheckMark'
      },
      onClick: () => postChanges(true)
    },
    {
      key: 'cancelAndClose',
      text: changed ? 'Отменить' : 'Закрыть',
      iconProps: {
        iconName: 'Cancel'
      },
      onClick: () => {
        if (changed) {
          lastEdited.current = undefined;
          setChanged(false);
        }
        deleteViewTab(true);
      }
    },
    {
      key: 'apply',
      disabled: !changed,
      text: 'Применить',
      iconProps: {
        iconName: 'Save'
      },
      onClick: () => postChanges(false)
    }
  ].map(i => i);

  useEffect(() => {
    const f = async () => {
      addViewTab(undefined);


      if (!newRecord) {
        const eq = prepareDefaultEntityQuery(erModel!.entity(entityName!));
        const entity = erModel!.entity(entityName!);

        refEntityName.current = {
          fieldName: "EntityName",
          value: entity.name
        };

        if (entity.parent) {
          valueHiddenParent.current = true;
          parentName.current = {fieldName: "Parent", value: entity.parent.name};
          setHiddenParent(true)
        }

        const attributes = eq.link.fields
          .filter((field) => field.attribute.type !== "Sequence")
          .map((field) => {
            switch (field.attribute.type) {
              case 'Parent':
              case 'Entity':
                return {
                  id: field.attribute.name,
                  name: field.attribute.name,
                  required: field.attribute.required,
                  lName: field.attribute.lName,
                  type: field.attribute.type,
                  references: field.links && field.links!.map((link) => link.entity.name),
                } as IEntityAttribute;
                break;
              default:
                return {
                  id: field.attribute.name,
                  required: field.attribute.required,
                  name: field.attribute.name,
                  lName: field.attribute.lName,
                  type: field.attribute.type,
                } as IAttribute;
            }
          });
        const eqSet = prepareDefaultEntityQuerySetAttr(erModel!.entity(entityName!));
        const attributesSet = eqSet.link.fields
          .filter((field) => field.attribute.type !== "Sequence")
          .map((field) => {
            return {
              id: field.attribute.name,
              name: field.attribute.name,
              lName: field.attribute.lName,
              type: field.attribute.type,
              references: field.links && field.links.map((link) => link.entity.name),
              attributes: [],
              presLen: 1,
              semCategories: field.attribute.semCategories.join(','),
              required: field.attribute.required
            } as ISetAttribute;
          });

        const allAttributes = attributes.concat(attributesSet);

        const arr = allAttributes.map((attr) => {
          return attr.id!
        });
        setCountEntityAttributes(arr);
        countEntityAttributes.current = arr.slice();
        setAttributeData(allAttributes);
        refAttribute.current = allAttributes;
      }
    };
    f();
  }, [newRecord]);

  useEffect(() => {
    if (needFocus.current) {
      needFocus.current.focus();
      needFocus.current = undefined;
    }
  }, [lastFocused]);

  useEffect(() => {
    return () => {
      dispatch(gdmnActions.saveSessionData({
        viewTabURL: url,
        sessionData: {
          lastEdited: lastEdited.current,
          lastFocused: lastFocused.current,
          controls: controlsData.current,
          countEntityAttributes: countEntityAttributes.current,
          refEntityName: refEntityName.current,
          parentName: parentName.current,
          refAttribute: refAttribute.current,
          valueHiddenParent: valueHiddenParent.current,
        }
      }));
    };
  }, []);

  return (
    <div>
      <CommandBar items={commandBarItems}/>
      <div styleName="FieldsColumn">
        <TextField
          label="Entity Name - required"
          defaultValue={
            refEntityName.current
              ? refEntityName.current.value
              : entityName ? entityName : ''
          }

          onChange={
            (_e, newValue?: string) => {
              if (newValue !== undefined) {
                lastEdited.current = {
                  fieldName: "EntityName",
                  value: newValue
                };
                refEntityName.current = {
                  fieldName: "EntityName",
                  value: newValue
                };
                setChanged(true);
              }
            }
          }
          onFocus={
            () => {
              lastFocused.current = "EntityName";
            }
          }
          componentRef={
            ref => {
              if (ref && lastFocused.current === "EntityName") {
                needFocus.current = ref;
              }
            }
          }
        />
        <div styleName="container">
          <div styleName="item">
            <Checkbox
              key={'hasParent'}
              disabled={false}
              label={`has parent`}
              checked={valueHiddenParent.current}
              styles={{root: {marginTop: '10px'}}}
              onChange={(_ev?: React.FormEvent<HTMLElement>, isChecked?: boolean) => {
                if (isChecked !== undefined) {
                  lastEdited.current = {
                    fieldName: "hasParent",
                    value: isChecked
                  };
                  setChanged(true);
                  if (isChecked) {
                    setHiddenParent(true);
                    valueHiddenParent.current = true;
                  } else {
                    setHiddenParent(false);
                    valueHiddenParent.current = false;
                  }
                }
              }}
              onFocus={
                () => {
                  lastFocused.current = "hasParent";
                }
              }
              componentRef={
                ref => {
                  if (ref && lastFocused.current === "hasParent") {
                    needFocus.current = ref;
                  }
                }
              }
            />
          </div>
          <div styleName="item">
            {hiddenParent ?
              <ComboBox
                selectedKey={parentName.current ? parentName.current.value : undefined}
                label="choose parent"
                autoComplete="on"
                options={Object.keys(erModel!.entities).map(key => ({key, text: key}))}
                onChange={(event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => {
                  if (option && option.key) {
                    lastEdited.current = {fieldName: "Parent", value: option.key as string};
                    parentName.current = {fieldName: "Parent", value: option.key as string};
                    setChanged(true);
                  }
                }}
              /> : undefined}
          </div>
        </div>
      </div>
      <div styleName="item">
        <DefaultButton
          onClick={() => {
            const newArr = changedCountEntityAttributes.slice();
            const id = `f${(+new Date).toString(16)}`;
            newArr.push(id);
            setCountEntityAttributes(newArr);
            countEntityAttributes.current = newArr.slice();
            changedFields.current[id] = "add";
          }}
          text="Add attribute"/>
      </div>
      <div>
        <ul>
          {changedCountEntityAttributes.map((id) =>
            <li key={id}>
              <EntityAttributeContainer
                useAttributeData={useAttributeData}
                deleteAttributeData={deleteAttributeData}
                attributeDataRow={attributeData.find((fn) => fn.id === id)}
                idRow={id}
                setChangesToRowField={setChangesToRowField}
                newRecord={newRecord}
              />
            </li>
          )}
        </ul>
      </div>
      <div>
      </div>
    </div>
  );
}, styles, {allowMultiple: true});
